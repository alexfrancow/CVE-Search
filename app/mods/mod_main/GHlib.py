from github import Github
import configparser
from datetime import datetime
from datetime import date
from app.mods.mod_main.databasePSQL import PSQLDatabase

def getRepos(cve):
    config = configparser.ConfigParser()
    try:
        config.read('./config.ini')
    except FileExistsError as err:
        print('File exists error: {0}', err)
        sys.exit(1)
    ACCESS_TOKEN = config['Github']['ACCESS_TOKEN']
    g = Github(ACCESS_TOKEN)
    db = PSQLDatabase()

    rate_limit = g.get_rate_limit()
    rate = rate_limit.search
    if rate.remaining == 0:
        print(f'You have 0/{rate.limit} API calls remaining. Reset time: {rate.reset}')
        return
    else:
        print(f'You have {rate.remaining}/{rate.limit} API calls remaining')

    # Search code
    query = f'"{cve}" in:file extension:py'
    result_code = g.search_code(query, order='desc')

    max_size = 100
    print(f'Found {result_code.totalCount} file(s)')
    if result_code.totalCount > max_size:
        result_code = result_code[:max_size]

    for file in result_code:
        print(f'{file.download_url}')
        print(f'{file.repository}')
        print(f'{file.sha}')
        print(f'{file.repository.forks_count}')
        created_at = datetime.strptime(str(file.repository.created_at), '%Y-%m-%d %H:%M:%S').strftime('%Y-%m-%d')
        updated_at = datetime.strptime(str(file.repository.updated_at), '%Y-%m-%d %H:%M:%S').strftime('%Y-%m-%d')
        print(f'{file.repository.updated_at}')
        print(f'{file.repository.id}')
        print(f'{file.repository.owner}')
        print(f'{file.repository.stargazers_count}')

        sqlquery = f"""INSERT INTO GithubRepos (CVE_id, repo_id, owner, created_at, updated_at, forks_count, stargazers_count, sha, download_url, repository)
                       VALUES ('{cve}','{file.repository.id}','{file.repository.owner}','{created_at}','{updated_at}','{file.repository.forks_count}','{file.repository.stargazers_count}','{file.sha}','{file.download_url}','{file.repository}')
                       ON CONFLICT (repo_id)
                       DO UPDATE SET
                       forks_count = excluded.forks_count,
                       stargazers_count = excluded.stargazers_count,
                       updated_at = excluded.updated_at,
                       sha = excluded.sha
                       ;"""
        print(sqlquery)
        db.query(sqlquery)
    db.conn.commit()
    db.close()

    return "OK"


def reposJSON(cve):
    db = PSQLDatabase()
    #sqlquery = f"""SELECT repo_id, created_at, download_url, stargazers_count, forks_count FROM githubrepos;"""
    sqlquery = f"""SELECT json_agg(to_json(d))
            from (
                select
                    repo_id, created_at, download_url, stargazers_count, forks_count
                from githubrepos
                ) as d 
    ;"""
    db.query(sqlquery)
    data_repo = db.cursor.fetchone()
    data_repo = data_repo[0]

    return str(data_repo)
