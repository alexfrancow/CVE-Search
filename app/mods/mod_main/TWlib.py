import requests
from bs4 import BeautifulSoup
from datetime import datetime
from datetime import date
import twint
import pandas as pd
from app.mods.mod_main.databasePSQL import PSQLDatabase
from app.mods.mod_main.textProcessing import TWprocessing


def getTweets(cve):
    db = PSQLDatabase()
    db.query(f"SELECT publised_date from CVES where CVE_id = '{cve}'")
    NVD_Published_Date = db.cursor.fetchone()[0]

    tweets = []
    c = twint.Config()
    c.Search = cve
    c.Since = NVD_Published_Date
    c.Store_object = True
    c.Hide_output = True
    c.Filter_retweets = True
    c.Store_object_tweets_list = tweets

    try:
        twint.run.Search(c)

        for t in tweets:
            url_list = ','.join([u for u in t.urls ])
            santweet = t.tweet.replace("'","")
            sqlquery = f"""INSERT INTO TwitterTweets (CVE_id, tweet_id, tweet, Datestamp, retweet_count, Replies_Count, Likes_Count, URLs, username)
                            VALUES ('{cve}','{t.id}','{santweet}','{t.datestamp}','{t.retweets_count}','{t.replies_count}','{t.likes_count}','{url_list}','{t.username}')
                            ON CONFLICT (tweet_id)
                            DO UPDATE SET
                            retweet_count = excluded.retweet_count,
                            Replies_Count = excluded.Replies_Count,
                            Likes_Count = excluded.Likes_Count
                            ;"""
            print(sqlquery)
            db.query(sqlquery)
    except Exception as e:
        print(e)
    db.conn.commit()
    db.close()
    return "OK"


def tweetsJSON(cve):
    db = PSQLDatabase()
    sqlquery = f"""SELECT Datestamp, tweet, tweet_id, retweet_count, replies_count, likes_count, username FROM TwitterTweets where cve_id = '{cve}';"""
    db.query(sqlquery)
    data_tweet = db.cursor.fetchall()
    df_tweet = pd.DataFrame(columns=['Date','Tweet','ID', 'RTs', 'Replies', 'Likes', 'Username'])
    for data in data_tweet:
        index = len(df_tweet)
        df_tweet.loc[index,'Date'] = data[0]
        df_tweet.loc[index,'Tweet'] = data[1]
        df_tweet.loc[index,'ID'] = data[2]
        df_tweet.loc[index,'RTs'] = data[3]
        df_tweet.loc[index,'Replies'] = data[4]
        df_tweet.loc[index,'Likes'] = data[5]
        df_tweet.loc[index,'Username'] = data[6]

    # Set Date to index
    df_tweet['datetime'] = pd.to_datetime(df_tweet['Date'])
    df_tweet = df_tweet.set_index('datetime')
    df_tweet.sort_values('Likes')

    # SUM
    df_tweet['count_sum_likes'] = df_tweet.groupby(['Date'])['Likes'].transform(sum)
    df_tweet['count_sum_rts'] = df_tweet.groupby(['Date'])['RTs'].transform(sum)
    a = df_tweet.groupby('Date')['Tweet'].apply(list)

    # MAX Twitter
    df_tweet = df_tweet.sort_values('Likes').drop_duplicates(['Date'],keep='last').sort_index()
    df_tweet = df_tweet.sort_index()
    df_tweet['n_tweets'] = [len(c) for c in a.tolist()]
    df_tweet['all_tweets'] = [c for c in a.tolist()]
    df_tweet = df_tweet.reset_index()

    # Create JSON data
    data = {}

    # Dates
    data['dates'] = []
    for date in df_tweet['Date']:
        data['dates'].append(date)

    # IDs
    data['ids'] = []
    for ids in df_tweet['ID']:
        ids = str(ids)
        data['ids'].append(ids)

    # Tweets Volume (n_tweets)
    data['tweets_volume'] = []
    for n_tweet in df_tweet['n_tweets']:
        data['tweets_volume'].append(n_tweet)

    # Likes Volume
    data['likes_volume'] = []
    for count_sum_likes in df_tweet['count_sum_likes']:
        data['likes_volume'].append(count_sum_likes)

    # RTs Volume
    data['retweets_volume'] = []
    for count_sum_rts in df_tweet['count_sum_rts']:
        data['retweets_volume'].append(count_sum_rts)

    # Max Tweets
    data['max_tweets'] = []
    for tweet in df_tweet['Tweet']:
        data['max_tweets'].append(tweet)

    # Username max tweet
    data['usernames'] = []
    for username in df_tweet['Username']:
        data['usernames'].append(username)

    # Predictions
    data['predictions'] = []
    pp = TWprocessing()
    df_Tweet_Tweet = df_tweet['Tweet']
    preds = pp.funcTWprocessing(df_Tweet_Tweet)
    for pred in preds:
        data['predictions'].append(int(pred))

    db.conn.commit()
    db.close()
    return data
