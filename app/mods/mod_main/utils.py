import requests
from bs4 import BeautifulSoup
from datetime import date
import sqlite3
from googlesearch import search

def nist_description(cve):
    req = requests.get("https://nvd.nist.gov/vuln/detail/"+cve)
    soup = BeautifulSoup(req.content, 'html.parser')
    description = soup.find("p", {"data-testid" : "vuln-description"}).getText()
    return description


def createCVEdb(new_cve):
    conn = sqlite3.connect('cve_s3arch.db')
    c = conn.cursor()
    description = nist_description(new_cve).replace("'", "")
    try:
        c.execute('''CREATE TABLE IF NOT EXISTS cves
                 (cve TEXT, description TEXT, datestamp TEXT, googleLinks TEXT)''')
    except:
        pass
    datestamp = date.today().strftime("%d/%m/%Y")
    c.execute('INSERT INTO cves (cve, description, datestamp) VALUES (?,?,?)', (new_cve, description, datestamp))
    conn.commit()
    return "OK"


def loadCVEs():
    with sqlite3.connect('cve_s3arch.db') as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM cves ORDER BY cve")
        data = cursor.fetchall()
        # return json.dumps(data)
        return data


def searchByCVE(cve, mode):
    with sqlite3.connect('cve_s3arch.db') as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT description, googleLinks FROM cves WHERE cve=?;", [cve])
        data = cursor.fetchall()

    if mode == "description":
        return data[0][0]

    elif mode == "googleLinks":
        return data[0][1]


def getGoogle(cve):
    links = ""
    for j in search(cve, tld="co.in", num=20, stop=20, pause=2):
        links += j+","
    links = links[:-1]

    with sqlite3.connect('cve_s3arch.db') as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE cves SET googleLinks=? WHERE cve=?;', [links, cve])
        data = cursor.fetchall()

    return links
