from flask import Blueprint, render_template
from flask import Flask, jsonify, Blueprint, render_template, request, flash, redirect, url_for

import requests
from bs4 import BeautifulSoup

from app.mods.mod_main.utils import createCVEdb, deleteCVEdb, loadCVEs, searchByCVE
from app.mods.mod_main.TWlib import getTweets, tweetsJSON

# Flask blueprints
main_blueprint = Blueprint('main', __name__, template_folder='templates')
createcve_blueprint = Blueprint('createCVE', __name__, template_folder='templates')
deletecve_blueprint = Blueprint('deleteCVE', __name__, template_folder='templates')
getcveinfo_blueprint = Blueprint('getCVEinfo', __name__, template_folder='templates')
tweetsjson_blueprint = Blueprint('tweetsJSON', __name__, template_folder='templates')
runCVE_blueprint = Blueprint('runCVE', __name__, template_folder='templates')
app = Flask(__name__)


@main_blueprint.route('/', methods= ['GET', 'POST'])
def main():
    cve = request.args.get('cve')
    description = ""
    googleLinks = ""
    rows = ""
    if cve:
        description = searchByCVE(cve, "description")

    try:
        rows = loadCVEs()
        print(rows)

    except:
        pass

    return render_template('index.html', rows=rows, cve=cve, description=description, googleLinks=googleLinks)


@tweetsjson_blueprint.route('/tweetsjson', methods= ['GET'])
def api_tweetsJSON():
    cve = request.args.get('cve')
    data = tweetsJSON(cve)

    return data


@createcve_blueprint.route('/createCVE', methods= ['POST'])
def createCVE():
    if request.method == 'POST':
        new_cve = request.form.get('cve')
    createCVEdb(new_cve)
    return redirect(url_for('main.main', cve=new_cve))



@getcveinfo_blueprint.route('/getCVEinfo', methods= ['GET', 'POST'])
def getCVEinfo():
    cve = request.args.get('cve')
    if cve:
        print(cve)
    return render_template('index.html', cve=cve)


@runCVE_blueprint.route('/run', methods= ['GET', 'POST'])
def runCVE():
    cve = request.args.get('cve')
    if cve:
        getTweets(cve)
    return redirect(url_for('main.main', cve=cve))
    #return render_template('index.html', cve=cve, description=description)


@deletecve_blueprint.route('/delete', methods= ['GET', 'POST'])
def deleteCVE():
    cve = request.args.get('cve')
    if cve:
        deleteCVEdb(cve)
    return redirect(url_for('main.main'))


if __name__ == '__main__':
    app.run(debug= True)
