from app import app
from flask_migrate import Migrate
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.orm import Query
from sqlalchemy.ext.declarative import declared_attr
from sqlalchemy.dialects.postgresql import JSONB
from sqlalchemy_utils import UUIDType
import uuid

app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://alexfranco:1234@127.0.0.1:5432/cve_search_db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)
print(db)

migrate = Migrate(app, db)


def get_uuid():
    return str(uuid.uuid4())

class Base(object):
    query: Query

    @declared_attr
    def __tablename__(cls):
        return inflection.underscore(cls.__name__).lower()

    def __init__(self, *args, **kwargs):
        db.Model.__init__(self, *args, **kwargs)

    def set(self, **kwargs):
        for key, val in kwargs.items():
            setattr(self, key, val)

    def to_dict(self):
        d = {}
        for column in self.__table__.columns:
            d[column.name] = getattr(self, column.name)

        return d

    def delete(self, synchronize_session=False):
        pk = {
            k.name: getattr(self, k.name)
            for k in self.__mapper__.primary_key
        }
        self.query.filter_by(**pk).delete(synchronize_session=synchronize_session)

# Cve model
class CVE(Base, db.Model):
    __tablename__ = "cves"
    cve_id = db.Column(db.String(100), primary_key=True)
    description = db.Column(db.String(600), unique=False)
    publised_date = db.Column(db.String(200))
    cvss = db.Column(db.String(200))
    cvss_vector = db.Column(db.String(200))

#    def __init__(self, CVE_id, Description, Published_Date, CVSS, CVSS_vector):
#        self.CVE_id = CVE_id
#        self.Description = Description
#        self.Published_Date = Published_Date
#        self.CVSS = CVSS
#        self.CVSS_vector = CVSS_vector

    def __repr__(self):
        return "<Cve {}>".format(self.cve_id)
